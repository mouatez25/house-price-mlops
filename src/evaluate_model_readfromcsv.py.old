import json
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error


def evaluate_model(y_true, y_pred, model_name="MyModel", log_path="evaluation_log.json"):
    """
    Evaluate a regression model and log metrics.
    """
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)

    metrics = {
        "timestamp": datetime.utcnow().isoformat(),
        "model": model_name,
        "MAE": round(mae, 4),
        "RMSE": round(rmse, 4),
        "R2": round(r2, 4)
    }

    # Print metrics
    print("\n--- Evaluation Metrics ---")
    for k, v in metrics.items():
        print(f"{k}: {v}")

    # Log metrics to file
    with open(log_path, "a") as f:
        f.write(json.dumps(metrics) + "\n")

    return metrics


def plot_predictions(y_true, y_pred):
    """
    Plot predicted vs actual values.
    """
    plt.figure(figsize=(8, 6))
    plt.scatter(y_true, y_pred, alpha=0.5)
    plt.plot([min(y_true), max(y_true)], [min(y_true), max(y_true)], 'r--')
    plt.xlabel("Actual Prices")
    plt.ylabel("Predicted Prices")
    plt.title("Prediction vs Actual")
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# Example usage:
# y_test = [...]   # your true values
# y_pred = [...]   # your predicted values
# evaluate_model(y_test, y_pred, model_name="XGBoost_v2")
# plot_predictions(y_test, y_pred)
