import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import joblib
from datetime import datetime
import os
import mlflow
import mlflow.sklearn

def train_model():
    # Setup MLflow
    mlflow.set_tracking_uri("http://127.0.0.1:5000")  # or your MLflow server address
    mlflow.set_experiment("Regression_House_Price_Prediction_Models")

    # Load dataset
    df = pd.read_csv("data/house_price_data.csv")
    X = df.drop("price", axis=1)
    y = df["price"]

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Start MLflow run
    with mlflow.start_run():
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)

        preds = model.predict(X_test)
        mae = mean_absolute_error(y_test, preds)

        # Save model locally
        os.makedirs("models/dev", exist_ok=True)
        joblib.dump(model, "models/dev/house_price_model.pkl")

        # Local file logging
        os.makedirs("logs", exist_ok=True)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} | TRAIN | model=RandomForestRegressor | MAE={mae:.2f} | saved=dev\n"

        with open("logs/train_log.txt", "a") as f:
            f.write(log_entry)

        # MLflow logging
        mlflow.log_param("n_estimators", 100)
        mlflow.log_metric("MAE", mae)
        mlflow.sklearn.log_model(model, "house_price_model_dev")

        print("âœ… Model trained and saved to dev.")
        print(log_entry.strip())
        print(f"ðŸ”— View run in MLflow UI.")
        # Save test sets for evaluation later
        X_test.to_csv("../data/X_test.csv", index=False)
        y_test.to_csv("../data/y_test.csv", index=False)
if __name__ == "__main__":
    train_model()
